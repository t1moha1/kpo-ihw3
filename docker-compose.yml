services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - msnet

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # создаём нужные темы сразу
      KAFKA_CREATE_TOPICS: "orders.created:1:1,orders.payment-result:1:1"
      # на всякий случай включаем авто-создание, чтобы подписка не падала
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - msnet

  orders-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ordersdb
    volumes:
      - orders-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - msnet

  payments-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: paymentsdb
    volumes:
      - payments-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - msnet

  orders-service:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__OrdersDb: "Host=orders-db;Database=ordersdb;Username=postgres;Password=postgres"
      Kafka__BootstrapServers: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
      orders-db:
        condition: service_healthy
    networks:
      - msnet

  payments-service:
    build:
      context: ./PaymentsService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__PaymentsDb: "Host=payments-db;Database=paymentsdb;Username=postgres;Password=postgres"
      Kafka__BootstrapServers: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
      payments-db:
        condition: service_healthy
    networks:
      - msnet

  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - kafka
      - orders-service
      - payments-service
    networks:
      - msnet

networks:
  msnet:
    driver: bridge

volumes:
  orders-data:
  payments-data: